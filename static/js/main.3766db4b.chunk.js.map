{"version":3,"sources":["redux/weatherSlice.js","redux/locationSlice.js","redux/index.js","components/CityCountryForm.js","components/WeatherOutput.js","components/WeatherContainer.js","components/CurrentLocationButton.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["getWeatherByCoordinates","createAsyncThunk","obj","a","dispatch","apiUrl","latitude","longitude","fetch","then","resp","json","getWeatherByCity","city","country","weatherSlice","createSlice","name","initialState","weatherData","status","extraReducers","pending","state","fulfilled","action","payload","rejected","locationSlice","location","position","reducers","setLocation","clearLocation","setPosition","store","configureStore","reducer","weather","locationActions","actions","Form","useDispatch","useSelector","useState","setCity","setCountry","showError","setShowError","useEffect","ErrorModal","props","Modal","size","aria-labelledby","centered","style","color","fontSize","fontWeight","Header","closeButton","Body","Footer","Button","onClick","onSubmit","e","preventDefault","target","reset","handleSubmit","className","type","id","placeholder","onChange","event","value","show","onHide","WeatherOutput","list","main","temp","temp_min","temp_max","humidity","windspeed","wind","speed","iconUrl","icon","console","log","option","setOption","toCelsius","Math","round","src","alt","checked","WeatherContainer","fetching","CurrentLocationButton","navigator","geolocation","getCurrentPosition","coords","HomePage","currentLocation","CityCountryForm","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mRAEaA,EAA0BC,YACrC,kCADqD,uCAErD,WAAOC,EAAP,kBAAAC,EAAA,+DAAcC,SACNC,EADR,+DACyEH,EAAII,SAD7E,gBAC6FJ,EAAIK,UADjG,oDAEeC,MAAMH,GAAQI,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAFjD,mFAFqD,yDAQ1CC,EAAmBX,YAC9B,2BAD8C,uCAE9C,WAAOC,EAAP,kBAAAC,EAAA,+DAAcC,SACNC,EADR,6DACuEH,EAAIW,KAD3E,YACmFX,EAAIY,QADvF,oDAEeN,MAAMH,GAAQI,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAFjD,mFAF8C,yDAwCjCI,EAhCMC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZC,YAAa,KACbC,OAAQ,MAEVC,eAAa,mBACVrB,EAAwBsB,SAAU,SAACC,GAClCA,EAAMH,OAAS,aAFN,cAKVpB,EAAwBwB,WAAY,SAACD,EAAOE,GAC3CF,EAAMH,OAAS,UACfG,EAAMJ,YAAcM,EAAOC,WAPlB,cASV1B,EAAwB2B,UAAW,SAACJ,GACnCA,EAAMH,OAAS,YAVN,cAYVR,EAAiBU,SAAU,SAACC,GAC3BA,EAAMH,OAAS,aAbN,cAgBVR,EAAiBY,WAAY,SAACD,EAAOE,GACpCF,EAAMH,OAAS,UACfG,EAAMJ,YAAcM,EAAOC,WAlBlB,cAoBVd,EAAiBe,UAAW,SAACJ,GAC5BA,EAAMH,OAAS,YArBN,K,gBCHAQ,EAnBOZ,YAAY,CAChCC,KAAM,WACNC,aAAc,CACZW,SAAU,KACVC,SAAU,MAEZC,SAAU,CACRC,YADQ,SACIT,EAAOE,GACjBF,EAAMM,SAAWJ,EAAOC,SAE1BO,cAJQ,SAIMV,GACZA,EAAMM,SAAWN,GAEnBW,YAPQ,SAOIX,EAAOE,GACjBF,EAAMO,SAAWL,EAAOC,YCXxBS,EAAQC,YAAe,CAC3BC,QAAS,CACPR,SAAUD,EAAcS,QACxBC,QAASvB,EAAasB,WAIbE,EAAkBX,EAAcY,QAG9BL,GAFepB,EAAayB,QAE5BL,G,OCsEAM,EA9EF,WACX,IACMrC,EAAWsC,cACXb,EAAWc,aAAY,SAACpB,GAAD,OAAWA,EAAMM,SAASA,YAHtC,EAKOe,mBAAS,IALhB,mBAKV/B,EALU,KAKJgC,EALI,OAMaD,mBAAS,IANtB,mBAMV9B,EANU,KAMDgC,EANC,OAOiBF,oBAAS,GAP1B,mBAOVG,EAPU,KAOCC,EAPD,KASjBC,qBAAU,WACR7C,EAASQ,EAAiBiB,MACzB,CAACzB,EAAUyB,IAEd,IAUMqB,EAAa,SAACC,GAClB,OACE,eAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,KAAK,KACLC,kBAAgB,gCAChBC,UAAQ,EAERC,MAAO,CAAEC,MAAO,QAASC,SAAU,OAAQC,WAAY,OANzD,UAQE,cAACP,EAAA,EAAMQ,OAAP,CAAcC,aAAW,EAAzB,0BACA,cAACT,EAAA,EAAMU,KAAP,UACE,4BAlCI,4CAoCN,cAACV,EAAA,EAAMW,OAAP,UACE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMjB,GAAa,IAApC,2BAMR,OACE,uBAAMkB,SAAU,SAACC,GAAD,OAhCG,SAACA,GACpBA,EAAEC,iBACW,KAATvD,GAA2B,KAAZC,EACjBkC,GAAa,GAEb5C,EAASmC,EAAgBP,YAAY,CAAEnB,OAAMC,aAE/CqD,EAAEE,OAAOC,QAyBcC,CAAaJ,IAApC,UACE,sBAAKK,UAAU,iCAAf,UACE,qBAAKA,UAAU,WAAf,SACE,uBACEC,KAAK,OACLD,UAAU,eACVE,GAAG,OACHzD,KAAK,OACL0D,YAAY,OACZC,SAAU,SAACC,GAAD,OAAWhC,EAAQgC,EAAMR,OAAOS,YAG9C,qBAAKN,UAAU,WAAf,SACE,uBACEC,KAAK,OACLD,UAAU,eACVE,GAAG,UACHzD,KAAK,UACL0D,YAAY,UACZC,SAAU,SAACC,GAAD,OAAW/B,EAAW+B,EAAMR,OAAOS,eAInD,qBAAKN,UAAU,6BAAf,SACE,qBAAKA,UAAU,WAAf,SACE,wBAAQE,GAAG,cAAX,6BAGJ,cAACxB,EAAD,CAAY6B,KAAMhC,EAAWiC,OAAQ,kBAAMhC,GAAa,UChB/CiC,EA7DO,WACpB,IAAM9D,EAAcwB,aAAY,SAACpB,GAAD,OAAWA,EAAMe,QAAQnB,eAD/B,EAEqBA,EAAY+D,KAAK,GAAGC,KAA3DC,EAFkB,EAElBA,KAAMC,EAFY,EAEZA,SAAUC,EAFE,EAEFA,SAAUC,EAFR,EAEQA,SAC5BC,EAAYrE,EAAY+D,KAAK,GAAGO,KAAKC,MACvCC,EAAO,4CAAwCxE,EAAY+D,KAAK,GAAG5C,QAAQ,GAAGsD,KAAvE,WAEXC,QAAQC,IAAI3E,GANc,MAQEyB,mBAAS,cARX,mBAQnBmD,EARmB,KAQXC,EARW,KAUpBC,EAAY,SAACb,GAAD,OAAUc,KAAKC,MAAO,EAAI,GAAMf,EAAO,MAIzD,OACE,sBAAKV,GAAG,eAAR,UACE,oBAAGA,GAAG,WAAN,UACGvD,EAAYN,KAAKI,KADpB,SACkCE,EAAYN,KAAKC,QACjD,uBACA,qBAAKsF,IAAKT,EAASU,IAAI,iBACX,eAAXN,EAAA,UAA6BX,EAA7B,oBAA4Ca,EAAUb,GAAtD,cAEH,+CAEE,uBACEX,KAAK,QACLK,MAAM,IACNwB,QAAoB,eAAXP,EACTnB,SAhBU,kBAAMoB,EAAU,oBAkBrB,IAfX,OAiBE,+CAEE,uBACEvB,KAAK,QACLK,MAAM,IACNwB,QAAoB,YAAXP,EACTnB,SA3BU,kBAAMoB,EAAU,iBA8B9B,uBACA,uBACA,iDACmB,IACL,eAAXD,EAAA,UACMG,KAAKC,MAAMd,GADjB,oBAEMY,EAAUZ,GAFhB,WAEiC,OAEpC,iDACmB,IACL,eAAXU,EAAA,UACMG,KAAKC,MAAMb,GADjB,oBAEMW,EAAUX,GAFhB,cAIH,2CAAcC,EAAd,QACA,6CAAgBC,EAAhB,aChCSe,EAvBU,WACvB,IAAMC,EAAW7D,aAAY,SAACpB,GAAD,OAAWA,EAAMe,QAAQlB,UAC9CD,EAAgBwB,aAAY,SAACpB,GAAD,OAAWA,EAAMe,QAAQnB,eAArDA,YAWR,MAAiB,YAAbqF,EARA,sBAAK9B,GAAG,eAAR,UACE,+CACA,kEASc,OAAhBvD,GAAqC,YAAbqF,EACnB,cAAC,EAAD,IAEA,MCWIC,EA7Be,WAC5B,IAAMrG,EAAWsC,cACXZ,EAAWa,aAAY,SAACpB,GAAD,OAAWA,EAAMM,SAASC,YAEvDmB,qBAAU,WACR7C,EAASJ,EAAwB8B,MAChC,CAAC1B,EAAU0B,IAYd,OACE,8BACE,qBAAK0C,UAAU,MAAf,SACE,qBAAKA,UAAU,WAAf,SACE,wBAAQP,QAdI,WACdyC,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,SAAC9E,GACxC,IAAIxB,EAAWwB,EAAS+E,OAAOvG,SAC3BC,EAAYuB,EAAS+E,OAAOtG,UAChCH,EAASmC,EAAgBL,YAAY,CAAE5B,WAAUC,mBAS/C,qCCqBKuG,EA1CE,WACf,IAAMC,EAAkBpE,aAAY,SAACpB,GAAD,OAAWA,EAAMM,SAASA,YACxDV,EAAcwB,aAAY,SAACpB,GAAD,OAAWA,EAAMe,QAAQnB,eACnDC,EAASuB,aAAY,SAACpB,GAAD,OAAWA,EAAMe,QAAQlB,UASpD,OARAyE,QAAQC,IACN,qBACAiB,EACA,mBACA5F,EACA,aACAC,GAGA,mCACE,sBAAKoD,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,kDAGJ,qBAAKA,UAAU,6BAAf,SACE,qBAAKA,UAAU,SAAf,SACE,cAACwC,EAAD,QAGJ,qBAAKxC,UAAU,kCAAf,SACE,qBAAKA,UAAU,WAAf,SACE,cAAC,EAAD,QAGJ,qBAAKA,UAAU,6BAAf,SACE,qBAAKA,UAAU,QAAf,SACmB,OAAhBrD,GAAmC,YAAXC,GACvB,cAAC,EAAD,cCzBC6F,MAVf,WACE,OACE,mCACE,qBAAKzC,UAAU,aAAf,SACE,cAAC,EAAD,SCIY0C,QACW,cAA7BC,OAAOtF,SAASuF,UAEe,UAA7BD,OAAOtF,SAASuF,UAEhBD,OAAOtF,SAASuF,SAASC,MACvB,2D,YCRNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUrF,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJsF,SAASC,eAAe,SDmHpB,kBAAmBhB,WACrBA,UAAUiB,cAAcC,MACrBnH,MAAK,SAAAoH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.3766db4b.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getWeatherByCoordinates = createAsyncThunk(\r\n  \"weather/getWeatherByCoordinates\",\r\n  async (obj, { dispatch }) => {\r\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${obj.latitude}&lon=${obj.longitude}&appid=94ba1824f5bc142ac1082520e96f2e36`;\r\n    return await fetch(apiUrl).then((resp) => resp.json());\r\n  }\r\n);\r\n\r\nexport const getWeatherByCity = createAsyncThunk(\r\n  \"weather/getWeatherByCity\",\r\n  async (obj, { dispatch }) => {\r\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${obj.city},${obj.country}&appid=94ba1824f5bc142ac1082520e96f2e36`;\r\n    return await fetch(apiUrl).then((resp) => resp.json());\r\n  }\r\n);\r\n\r\nconst weatherSlice = createSlice({\r\n  name: \"weather\",\r\n  initialState: {\r\n    weatherData: null,\r\n    status: null,\r\n  },\r\n  extraReducers: {\r\n    [getWeatherByCoordinates.pending]: (state) => {\r\n      state.status = \"loading\";\r\n    },\r\n\r\n    [getWeatherByCoordinates.fulfilled]: (state, action) => {\r\n      state.status = \"success\";\r\n      state.weatherData = action.payload;\r\n    },\r\n    [getWeatherByCoordinates.rejected]: (state) => {\r\n      state.status = \"failed\";\r\n    },\r\n    [getWeatherByCity.pending]: (state) => {\r\n      state.status = \"loading\";\r\n    },\r\n\r\n    [getWeatherByCity.fulfilled]: (state, action) => {\r\n      state.status = \"success\";\r\n      state.weatherData = action.payload;\r\n    },\r\n    [getWeatherByCity.rejected]: (state) => {\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport default weatherSlice;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst locationSlice = createSlice({\r\n  name: \"location\",\r\n  initialState: {\r\n    location: null,\r\n    position: null,\r\n  },\r\n  reducers: {\r\n    setLocation(state, action) {\r\n      state.location = action.payload;\r\n    },\r\n    clearLocation(state) {\r\n      state.location = state;\r\n    },\r\n    setPosition(state, action) {\r\n      state.position = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default locationSlice;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport locationSlice from \"./locationSlice\";\r\nimport weatherSlice from \"./weatherSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    location: locationSlice.reducer,\r\n    weather: weatherSlice.reducer,\r\n  },\r\n});\r\n\r\nexport const locationActions = locationSlice.actions;\r\nexport const weatherActions = weatherSlice.actions;\r\n\r\nexport default store;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getWeatherByCity } from \"../redux/weatherSlice\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { locationActions } from \"../redux/index\";\r\n\r\nconst Form = () => {\r\n  let error = \"City and Country cannot be left blank\";\r\n  const dispatch = useDispatch();\r\n  const location = useSelector((state) => state.location.location);\r\n\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [showError, setShowError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(getWeatherByCity(location));\r\n  }, [dispatch, location]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (city === \"\" || country === \"\") {\r\n      setShowError(true);\r\n    } else {\r\n      dispatch(locationActions.setLocation({ city, country }));\r\n    }\r\n    e.target.reset();\r\n  };\r\n\r\n  const ErrorModal = (props) => {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        // class='error'\r\n        style={{ color: \"black\", fontSize: \"20px\", fontWeight: \"600\" }}\r\n      >\r\n        <Modal.Header closeButton>Please Note!</Modal.Header>\r\n        <Modal.Body>\r\n          <p>{error}</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={() => setShowError(false)}>Got it</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row p-5 justify-content-center\">\r\n        <div className=\"col-sm-4\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"city\"\r\n            name=\"city\"\r\n            placeholder=\"City\"\r\n            onChange={(event) => setCity(event.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"col-sm-4\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"country\"\r\n            name=\"country\"\r\n            placeholder=\"Country\"\r\n            onChange={(event) => setCountry(event.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-sm-4\">\r\n          <button id=\"get-weather\">Get Weather</button>\r\n        </div>\r\n      </div>\r\n      <ErrorModal show={showError} onHide={() => setShowError(false)} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst WeatherOutput = () => {\r\n  const weatherData = useSelector((state) => state.weather.weatherData);\r\n  const { temp, temp_min, temp_max, humidity } = weatherData.list[0].main;\r\n  const windspeed = weatherData.list[0].wind.speed;\r\n  let iconUrl = `https://openweathermap.org/img/wn/${weatherData.list[0].weather[0].icon}@2x.png`;\r\n\r\n  console.log(weatherData);\r\n\r\n  const [option, setOption] = useState(\"fahrenheit\");\r\n\r\n  const toCelsius = (temp) => Math.round((5 / 9) * (temp - 32));\r\n  const switchToC = () => setOption(\"celsius\");\r\n  const switchToF = () => setOption(\"fahrenheit\");\r\n\r\n  return (\r\n    <div id=\"weather-data\">\r\n      <p id=\"location\">\r\n        {weatherData.city.name}, &nbsp;{weatherData.city.country}\r\n        <br />\r\n        <img src={iconUrl} alt=\"weather icon\"></img>\r\n        {option === \"fahrenheit\" ? `${temp} °F` : `${toCelsius(temp)} °C `}\r\n      </p>\r\n      <label>\r\n        °F &nbsp;\r\n        <input\r\n          type=\"radio\"\r\n          value=\"f\"\r\n          checked={option === \"fahrenheit\"}\r\n          onChange={switchToF}\r\n        ></input>\r\n      </label>{\" \"}\r\n      &nbsp;\r\n      <label>\r\n        °C &nbsp;\r\n        <input\r\n          type=\"radio\"\r\n          value=\"c\"\r\n          checked={option === \"celsius\"}\r\n          onChange={switchToC}\r\n        ></input>\r\n      </label>\r\n      <br></br>\r\n      <br></br>\r\n      <p>\r\n        Min temperature:{\" \"}\r\n        {option === \"fahrenheit\"\r\n          ? `${Math.round(temp_min)} °F`\r\n          : `${toCelsius(temp_min)} °C `}{\" \"}\r\n      </p>\r\n      <p>\r\n        Max temperature:{\" \"}\r\n        {option === \"fahrenheit\"\r\n          ? `${Math.round(temp_max)} °F`\r\n          : `${toCelsius(temp_max)} °C `}\r\n      </p>\r\n      <p>Humidity: {humidity} %</p>\r\n      <p>Wind speed: {windspeed}m/s</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherOutput;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport WeatherOutput from \"./WeatherOutput.js\";\r\n\r\nconst WeatherContainer = () => {\r\n  const fetching = useSelector((state) => state.weather.status);\r\n  const { weatherData } = useSelector((state) => state.weather.weatherData);\r\n  const fetchingMessage = () => {\r\n    return (\r\n      <div id=\"weather-data\">\r\n        <p>Working on it!</p>\r\n        <p>This should only take a moment</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // this is what gets rendered\r\n  if (fetching === \"loading\") {\r\n    return fetchingMessage();\r\n  }\r\n  if (weatherData !== null && fetching === \"success\") {\r\n    return <WeatherOutput />;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default WeatherContainer;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getWeatherByCoordinates } from \"../redux/weatherSlice\";\r\nimport { locationActions } from \"../redux/index\";\r\n\r\nconst CurrentLocationButton = () => {\r\n  const dispatch = useDispatch();\r\n  const position = useSelector((state) => state.location.position);\r\n\r\n  useEffect(() => {\r\n    dispatch(getWeatherByCoordinates(position));\r\n  }, [dispatch, position]);\r\n\r\n  const handleClick = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        let latitude = position.coords.latitude;\r\n        let longitude = position.coords.longitude;\r\n        dispatch(locationActions.setPosition({ latitude, longitude }));\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-4\">\r\n          <button onClick={handleClick}>Current Location</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentLocationButton;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CityCountryForm from \"./CityCountryForm.js\";\r\nimport WeatherContainer from \"./WeatherContainer.js\";\r\nimport CurrentLocationButton from \"./CurrentLocationButton\";\r\n\r\nconst HomePage = () => {\r\n  const currentLocation = useSelector((state) => state.location.location);\r\n  const weatherData = useSelector((state) => state.weather.weatherData);\r\n  const status = useSelector((state) => state.weather.status);\r\n  console.log(\r\n    \"currentLocation = \",\r\n    currentLocation,\r\n    \"  weatherData = \",\r\n    weatherData,\r\n    \" status = \",\r\n    status\r\n  );\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-6 title mt-5\">\r\n            <h1> Weather App</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-12\">\r\n            <CityCountryForm />\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center mt-3\">\r\n          <div className=\"col-sm-4\">\r\n            <CurrentLocationButton />\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-4\">\r\n            {weatherData !== null && status === \"success\" && (\r\n              <WeatherContainer />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./components/HomePage.js\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"main-image\">\n        <HomePage />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport store from \"./redux/index\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}